name: Release on versionCode change

on:
  push:
    paths:
      - 'app/build.gradle.kts'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      # Checkout repo first
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2   # fetch enough history to compare commits

      # Now check if last commit was from GitHub Actions bot
      - name: Skip if last commit is from GitHub Actions bot
        run: |
          AUTHOR=$(git log -1 --pretty=format:'%an')
          if [ "$AUTHOR" = "github-actions[bot]" ]; then
            echo "Last commit was from GitHub Actions bot. Skipping workflow."
            exit 0
          fi

      - name: Extract versionName and versionCode
        id: version
        run: |
          FILE=app/build.gradle.kts
          VERSION_NAME=$(sed -n 's/.*versionName\s*=\s*"\(.*\)".*/\1/p' "$FILE" || true)
          VERSION_CODE=$(sed -n 's/.*versionCode\s*=\s*\([0-9][0-9]*\).*/\1/p' "$FILE" || true)
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT

      - name: Check if versionCode changed
        id: check_version_change
        run: |
          if git rev-parse --verify HEAD^ >/dev/null 2>&1; then
            OLD_CODE=$(git show HEAD^:app/build.gradle.kts 2>/dev/null | sed -n 's/.*versionCode\s*=\s*\([0-9][0-9]*\).*/\1/p' || true)
          else
            OLD_CODE=""
          fi
          NEW_CODE="${{ steps.version.outputs.version_code }}"
          if [ "$OLD_CODE" = "$NEW_CODE" ]; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "Version code unchanged ($NEW_CODE). Skipping release."
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Version code changed from $OLD_CODE to $NEW_CODE"
          fi

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Decode and save signing key
        if: ${{ steps.check_version_change.outputs.changed == 'true' }}
        run: |
          echo "${{ secrets.SIGNING_KEYSTORE_BASE64 }}" | base64 --decode > release.keystore
          echo "SIGNING_KEYSTORE_PATH=$PWD/release.keystore" >> $GITHUB_ENV

      - name: Get commits since last tag
        id: commits
        if: ${{ steps.check_version_change.outputs.changed == 'true' }}
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"%s")
          else
            COMMITS=$(git log "$LAST_TAG"..HEAD --pretty=format:"%s")
          fi
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate summary (AI with fallback)
        id: summary
        run: |
          COMMITS="${{ steps.commits.outputs.commits }}"
          CONTENT="Commits:\n$COMMITS"

          PAYLOAD=$(jq -nc \
            --arg model "mistralai/mistral-small-3.2-24b-instruct:free" \
            --arg system "Summarize commit messages into concise bullet points for a changelog. Output only the bullet points, nothing else." \
            --arg content "$CONTENT" \
            '{model:$model, messages:[{role:"system",content:$system},{role:"user",content:$content}] }')

          RESPONSE=$(curl -s https://openrouter.ai/api/v1/chat/completions \
            -H "Authorization: Bearer ${{ secrets.OPENROUTER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" | jq -r '.choices[0].message.content // empty')

          if [ -z "$RESPONSE" ]; then
            echo "AI summary empty â€” using commits."
            SUMMARY=$(printf '%s\n' "$COMMITS" | sed '/^$/d' | sed 's/^/- /')
          else
            SUMMARY="$RESPONSE"
          fi

          {
            echo "summary<<EOF"
            echo "$SUMMARY"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"


      - name: Write F-Droid changelog file
        if: ${{ steps.check_version_change.outputs.changed == 'true' }}
        run: |
          mkdir -p metadata/en-US/changelogs
          FILE="metadata/en-US/changelogs/${{ steps.version.outputs.version_code }}.txt"
          echo "${{ steps.summary.outputs.summary }}" > "$FILE"
          echo "F-Droid changelog written to $FILE"

      - name: Auto-commit F-Droid changelog
        if: ${{ steps.check_version_change.outputs.changed == 'true' }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add metadata/en-US/changelogs/${{ steps.version.outputs.version_code }}.txt
          git commit -m "chore: add F-Droid changelog for versionCode ${{ steps.version.outputs.version_code }}" || echo "No changes to commit"
          git push origin HEAD:${GITHUB_REF#refs/heads/}

      - name: Compute release tag from versionName
        id: release_tag
        if: ${{ steps.check_version_change.outputs.changed == 'true' }}
        run: |
          VN="${{ steps.version.outputs.version_name }}"
          if [[ "$VN" == v* ]]; then
            TAG="$VN"
          else
            TAG="v$VN"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Grant execute permission for Gradlew
        if: ${{ steps.check_version_change.outputs.changed == 'true' }}
        run: chmod +x ./gradlew

      - name: Build APK
        if: ${{ steps.check_version_change.outputs.changed == 'true' }}
        run: ./gradlew assembleGithubRelease
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
          SIGNING_KEYSTORE_PATH: ${{ env.SIGNING_KEYSTORE_PATH }}

      - name: Create new release with APK
        if: ${{ steps.check_version_change.outputs.changed == 'true' }}
        run: |
          echo "${{ steps.summary.outputs.summary }}" > release_notes.md
          gh release create "${{ steps.release_tag.outputs.tag }}" \
            --title "aiyo ${{ steps.release_tag.outputs.tag }}" \
            --notes-file release_notes.md \
            app/build/outputs/apk/githubRelease/app-githubRelease.apk#aiyo.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
